import { ISessionData, ITelegramWebApp } from './telegram.interface';
import { v4 as uuidv4 } from 'uuid';

import {
  FIRST_STEP,
  HEADER,
  FIRST_STEP_A,
  FIRST_STEP_B,
  FIRST_STEP_C,
  SECOND_STEP,
  THREE_STEP,
  FOUR_STEP,
  FOUR_STEP_A,
  FOUR_STEP_B,
  FOOTER,
  THREE_STEP_A,
  TELEGRAM_BOT_NAME,
  FIRST_STEP_LINK,
  STEPS,
  TELEGRAM_MESSAGE_CHAT_PROD,
  TELEGRAM_MESSAGE_CHAT_TEST,
  LIMIT_TIME_IN_MINUTES_FOR_ORDER,
} from './telegram.constants';
import { User } from '@grammyjs/types';
import { IOffer } from 'src/airtable/types/IOffer.interface';
import { BotStatus } from 'src/airtable/types/IBot.interface';
import { INotifications } from 'src/airtable/types/INotification.interface';
import { INotificationStatistics } from 'src/airtable/types/INotificationStatistic.interface';
import {
  getDifferenceInMinutes,
  getTimeWithTz,
} from 'src/common/date/date.methods';

export function sayHi(first_name: string, username: string): string {
  return (
    `–ü—Ä–∏–≤–µ—Ç, ${first_name || username}! \n\n` + FIRST_STEP_B + '–í –ø—É—Ç—å ‚§µ\n'
  );
}

export function createMsgToSecretChat(
  from: User,
  comment: string,
  order: string,
  chatId: string,
) {
  const { first_name, last_name, username } = from;
  // const commandForBot =
  //   botType === 'development'
  //     ? `/message=${chatId}@test_dowry_bot`
  //     : `/message=${chatId}@DowryWorkBot`;

  const instruction =
    '\n–í—ã–±–∏—Ä–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /message_send,c–∫–æ–ø–∏—Ä—É–π—Ç–µ chat_id –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å—à–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–æ—Ç–∞';
  const userComment = comment
    ? `\n–†–∞–∑–¥–∞—á–∞:${order}\nchat_id=${chatId}\n–°–æ–æ–±—â–µ–Ω–∏–µ:${comment}`
    : '';
  return `–°—Ç–∞—Ä—Ç: ${getTimeWithTz()}\n${first_name} ${last_name || ''} username=${username || ''} 
  ${userComment}${instruction}`;
}

export function createInitialSessionData(
  id?: string,
  user?: string,
): ISessionData {
  return {
    sessionId: uuidv4(),
    user: user,
    chat_id: id || null,
    startTime: getTimeWithTz(),
    stopBuyTime: null,
    stopTime: null,
    isLoadImageSearch: false,
    isLoadImageGiveGood: false,
    isLoadImageOnComment: false,
    isLoadImageBrokeCode: false,
    isLoadImageCheck: false,
    isLoadImageOrderWithPVZ: false,
    step: STEPS.INBOT,
    comment: '',
    images: [],
    lastLoadImage: null,
    lastMessage: null,
    isFinish: false,
    offerId: null,
    status: '–í –±–æ—Ç–µ',
    location: null,
    errorStatus: null,
    countTryError: 0,
    conversation: null,
  };
}

export function UpdateSessionByField(
  session: ISessionData,
  field: string,
  data: string | ITelegramWebApp,
): ISessionData {
  session[field] = data;
  return session;
}

export function UpdateSessionByStep(
  session: ISessionData,
  data?: string,
  isPhotoMsg?: boolean,
): ISessionData {
  const { step } = session;

  //console.log('UPDATE SESSION STEP=', step);
  switch (step) {
    case STEPS.INBOT:
    case STEPS.CHECK_ARTICUL:
      break;
    case STEPS.CHOOSE_OFFER:
      session.stopTime = getTimeWithTz();
      break;
    case STEPS.SEARCH:
      session.isLoadImageSearch = true;
      session.status = '–ü–æ–∏—Å–∫';
      session.stopTime = getTimeWithTz();
      break;
    case STEPS.ORDER:
      session.isLoadImageOrderWithPVZ = true;
      session.stopBuyTime = getTimeWithTz();
      session.status = '–ó–∞–∫–∞–∑';
      break;
    case STEPS.RECEIVED:
      session.isLoadImageGiveGood = true;
      session.status = '–ü–æ–ª—É—á–µ–Ω';
      break;
    case STEPS.COMMENT_ON_CHECK:
      session.comment = data;
      session.stopTime = getTimeWithTz();
      break;
    case STEPS.COMMENT:
      session.isLoadImageOnComment = true;
      session.status = '–û—Ç–∑—ã–≤';
      session.stopTime = getTimeWithTz();
      break;
    case STEPS.SHTRIH_CODE:
      session.isLoadImageBrokeCode = true;
      session.status = '–®—Ç—Ä–∏—Ö-–∫–æ–¥';
      session.stopTime = getTimeWithTz();
      break;
    case STEPS.CHECK:
      session.isLoadImageCheck = true;
      session.stopTime = getTimeWithTz();
      session.status = '–ß–µ–∫';
      session.isFinish = true;
      break;
    default:
      break;
  }

  if (isPhotoMsg) {
    session.images = [...session.images, data];
    session.lastLoadImage = data;
  }

  session = nextStep(session);

  return session;
}
export function nextStep(session: ISessionData): ISessionData {
  session.step = session.step + 1;
  return session;
}

export function getTextForFirstStep(data: ITelegramWebApp) {
  const { title, keys, cash, priceWb, description, priceForYou } = data;
  const caption =
    `üî•${title}üî•` +
    '\n' +
    description +
    '\n' +
    '‚ùå–¶–µ–Ω–∞ –Ω–∞ WB ~' +
    priceWb +
    ' ‚ÇΩ' +
    '\n' +
    `‚ùóÔ∏è –ö–µ—à–±—ç–∫ ~ ${cash}‚ùóÔ∏è \n` +
    `‚≠êÔ∏è –í–∞—à–∞ —Ü–µ–Ω–∞ ~ ${priceForYou} ‚ÇΩ ü´∂ \n` +
    '\n\n' +
    HEADER +
    FIRST_STEP +
    keys +
    '\n\n' +
    FIRST_STEP_LINK +
    //FIRST_STEP_A +
    (data.location ? `‚ùóÔ∏è–†–∞–∑–¥–∞—á–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: ${data.location}‚ùóÔ∏è\n` : '');
  return [
    {
      type: 'photo',
      media: data.image,
      caption: caption,
    },
  ];
}

export function getTextByNextStep(step: number): string {
  switch (step) {
    case STEPS.CHOOSE_OFFER:
      return FIRST_STEP_LINK;
    case STEPS.SEARCH:
    case STEPS.CHECK_ARTICUL:
      return FIRST_STEP_A + FIRST_STEP_B + getNumberText(step);
    case STEPS.ORDER:
      return FIRST_STEP_C + getNumberText(step);
    case STEPS.RECEIVED:
      return SECOND_STEP + getNumberText(step);
    case STEPS.COMMENT_ON_CHECK:
      return THREE_STEP + getNumberText(step);
    case STEPS.COMMENT:
      return FOUR_STEP + THREE_STEP_A + getNumberText(step);
    case STEPS.SHTRIH_CODE:
      return FOUR_STEP_A + getNumberText(step);
    case STEPS.CHECK:
      return FOUR_STEP_B + getNumberText(step);
    default:
      return FOOTER;
  }
}

function getNumberText(step: number) {
  const finish_txt = `–î–æ —Ñ–∏–Ω–∏—à–∞ `;
  switch (step) {
    case STEPS.CHOOSE_OFFER:
      return finish_txt + '8Ô∏è‚É£ —à–∞–≥–æ–≤\n';
    case STEPS.SEARCH:
      return finish_txt + '7Ô∏è‚É£ —à–∞–≥–æ–≤\n';
    case STEPS.ORDER:
      return finish_txt + '6Ô∏è‚É£ —à–∞–≥–æ–≤\n';
    case STEPS.RECEIVED:
      return finish_txt + '5Ô∏è‚É£ —à–∞–≥–æ–≤\n';
    case STEPS.COMMENT_ON_CHECK:
      return finish_txt + '4Ô∏è‚É£ —à–∞–≥–∞\n';
    case STEPS.COMMENT:
      return finish_txt + '3Ô∏è‚É£ —à–∞–≥–∞\n';
    case STEPS.SHTRIH_CODE:
      return finish_txt + '2Ô∏è‚É£ —à–∞–≥–∞\n';
    case STEPS.CHECK:
      return finish_txt + '1Ô∏è‚É£ —à–∞–≥\n';
    case STEPS.INBOT:
      return '';
  }
}

export function getOffer(data: IOffer) {
  const offer =
    `üî•${data.fields['Name']}üî•` +
    '\n' +
    data.fields['–û–ø–∏—Å–∞–Ω–∏–µ'] +
    '\n' +
    '‚ùå–¶–µ–Ω–∞ –Ω–∞ WB ~' +
    data.fields['–¶–µ–Ω–∞ WB'] +
    '\n' +
    `‚ùóÔ∏è –ö–µ—à–±—ç–∫ ~ ${data.fields['–ö–µ—à–±—ç–∫']}‚ùóÔ∏è \n` +
    `‚≠êÔ∏è –í–∞—à–∞ —Ü–µ–Ω–∞ ~ ${data.fields['–í–∞—à–∞ —Ü–µ–Ω–∞']} ü´∂ \n` +
    `‚úÖ –î–ª—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ ${TELEGRAM_BOT_NAME} !\n 
    –ë—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—èü•∞ü•∞ü•∞`;

  const medias = [];
  const countPhotos = data.fields['–§–æ—Ç–æ'].length;
  for (let i = 0; i < data.fields['–§–æ—Ç–æ'].length; i++) {
    medias.push({
      type: 'photo',
      media: data.fields['–§–æ—Ç–æ'][i].url,
      caption: countPhotos - 1 === i ? offer : '',
    });
  }
  return medias;
}

export const parseUrl = (url: string, articul: string): boolean => {
  if (!url) return false;
  try {
    const splitUrl = url.trim().split('?')[0];
    const articulOnCheck = splitUrl.replace(/\D/g, '');
    return articul == articulOnCheck;
  } catch (e) {
    return false;
  }
};

export const LocationCheck = (
  locationOffer: string,
  locationUser: string,
): { status: boolean; text: string } => {
  if (!locationUser) return { status: false, text: '–õ–æ–∫–∞—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞' };

  return locationUser.toLowerCase().includes(locationOffer.toLowerCase())
    ? { status: true, text: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —à–∞–≥ 1Ô∏è‚É£' }
    : {
        status: false,
        text: `–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (${locationUser}) –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–∞—á–µ`,
      };
};

export const getSecretChatId = () => {
  return process.env.NODE_ENV === 'development'
    ? TELEGRAM_MESSAGE_CHAT_TEST
    : TELEGRAM_MESSAGE_CHAT_PROD;
};

export const getNotificationValue = (
  notifications: INotifications,
  statisticNotifications: INotificationStatistics,
  status: BotStatus,
  startTime: string,
  stopTime: string,
) => {
  let statusNotification: BotStatus;
  switch (status) {
    case '–í—ã–±–æ—Ä —Ä–∞–∑–¥–∞—á–∏':
    case '–ü–æ–∏—Å–∫':
      let minutes = 0;
      if (!stopTime) {
        minutes = getDifferenceInMinutes(startTime);
      } else {
        minutes = getDifferenceInMinutes(stopTime);
      }
      statusNotification =
        minutes < LIMIT_TIME_IN_MINUTES_FOR_ORDER ? '–ü–æ–∏—Å–∫' : '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ';
      console.log('minutes', minutes);
      break;
    case '–ó–∞–∫–∞–∑':
      statusNotification = '–ó–∞–∫–∞–∑';
      break;
    case '–ü–æ–ª—É—á–µ–Ω':
      statusNotification = '–ü–æ–ª—É—á–µ–Ω';
      break;
    case '–û—Ç–∑—ã–≤':
      statusNotification = '–û—Ç–∑—ã–≤';
      break;
    case '–®—Ç—Ä–∏—Ö-–∫–æ–¥':
      statusNotification = '–®—Ç—Ä–∏—Ö-–∫–æ–¥';
      break;
    case '–ß–µ–∫':
      statusNotification = '–ß–µ–∫';
      break;
  }
  return filterNotificationValue(
    notifications,
    statisticNotifications,
    statusNotification,
  );
};

const filterNotificationValue = (
  notifications: INotifications,
  statisticNotifications: INotificationStatistics,
  status: BotStatus,
) => {
  let notification = null;
  let statistic = null;

  try {
    notification = notifications.records.find(
      (x) => x.fields.–ù–∞–∑–≤–∞–Ω–∏–µ === status,
    );
    statistic =
      statisticNotifications.records.length === 0
        ? null
        : statisticNotifications.records.find(
            (x) => x.fields.–®–∞–±–ª–æ–Ω[0] === notification.fields.Id,
          );
    return { notification, statistic };
  } catch (e) {
    console.log('filterNotificationValue', e);
  } finally {
    return { notification, statistic, status };
  }
};