import {
  FeedbackStatus,
  ISessionData,
  ITelegramWebApp,
} from './telegram.interface';
import { v4 as uuidv4 } from 'uuid';

import {
  FIRST_STEP_A,
  //FIRST_STEP_B,
  FIRST_STEP_C,
  SECOND_STEP,
  //THREE_STEP,
  //FOUR_STEP,
  //FOUR_STEP_A,
  //FOUR_STEP_B,
  FOOTER,
  FIRST_STEP_LINK,
  STEPS,
  TELEGRAM_MESSAGE_CHAT_PROD,
  TELEGRAM_MESSAGE_CHAT_TEST,
  LIMIT_TIME_IN_MINUTES_FOR_ORDER,
  COUNT_TRY_ERROR,
  FIVE_STEP,
  SIX_STEP,
  LIMIT_TIME_IN_MINUTES_FOR_BUY,
  STEP_ERROR_TEXT,
  WEB_APP,
  STEP_EXAMPLE_TEXT_DOWN,
  STEP_EXAMPLE_TEXT_UP,
  FIRST_STEP_CART,
  SUBSCRIBE_CHAT_URL,
  FIRST_STEP_KEY_VALUE,
  STEP_TEXT_NUMBER_EMOJI,
  SEVEN_STEP,
  SIX_STEP_LINK,
  LIMIT_TIME_IN_MINUTES_FOR_ORDER_WITH_FILTER,
  LIMIT_TIME_IN_MINUTES_FOR_BUY_WITH_FILTER,
  CASH_STOP_WORDS,
} from './telegram.constants';
import { ChatMember, User } from '@grammyjs/types';
import { IOffer, IOffers } from 'src/airtable/types/IOffer.interface';
import {
  BotStatus,
  BrokeBotStatus,
  IBot,
} from 'src/airtable/types/IBot.interface';
import { INotifications } from 'src/airtable/types/INotification.interface';
import { INotificationStatistics } from 'src/airtable/types/INotificationStatistic.interface';
import {
  FORMAT_DATE_SIMPLE,
  TIME_FULL,
  getDifferenceInDays,
  getDifferenceInMinutes,
  getTimeWithTz,
  dateFormatNoTZ,
  getDate,
} from 'src/common/date/date.methods';
import { IDistribution } from 'src/airtable/types/IDisturbation.interface';

export function sayHi(
  first_name: string,
  username: string,
  id: number,
): string {
  return (
    `\n\n\n\n\Ô∏è–ü—Ä–∏–≤–µ—Ç, ${first_name || username || '–¥—Ä—É–≥'}!‚úåÔ∏è` +
    `\n–í–∞—à –Ω–æ–º–µ—Ä –¥–ª—è üí∞ ${id}\n` +
    '\n–í –ø—É—Ç—å (üëâ —Ä–∞–∑–¥–∞—á–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π üá∑üá∫)‚§µ\n'
  );
}

/**
 * —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—à–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export function getTextToChatMessage(
  from: User,
  comment: string,
  order: string,
  chatId: string | number,
  name: string,
  status?: BotStatus,
) {
  const userValue = getUserName(from);
  const statusText = status ? ` (${status})` : '';
  const typeMessage = order
    ? `–†–∞–∑–¥–∞—á–∞:${name} ${statusText}`
    : '–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
  const instruction =
    '\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /message_send,c–∫–æ–ø–∏—Ä—É–π—Ç–µ chat_id –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å—à–µ';
  const userComment = comment
    ? `\n${typeMessage} ${order}\n‚û°Ô∏èchat_id=${chatId}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:${comment}`
    : '';
  return `‚ùì${getTimeWithTz(FORMAT_DATE_SIMPLE)}\n${userValue.fio} username=${userValue.userName} 
  ${userComment}${instruction}‚ùì`;
}
/**
 * —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –æ—Ç–≤–µ—á–µ–Ω –∏–ª–∏ –≤–æ–ø—Ä–æ—Å)
 */
export const createCommentForDb = (comment: string, isAnswer?: boolean) => {
  if (!comment) return '';
  const emoji = isAnswer ? '‚úÖ' : '‚ùì';
  return `${getTimeWithTz()}\n${emoji} ${comment}`;
};

export const getUserName = (from: User) => {
  const { first_name, last_name, username } = from;
  return {
    fio: `${first_name} ${last_name || ''}`,
    userName: `${username || ''}`,
  };
};

export function createInitialSessionData(
  id?: string,
  user?: string,
): ISessionData {
  return {
    sessionId: uuidv4(),
    user: user,
    chat_id: id || null,
    startTime: getTimeWithTz(),
    stopBuyTime: null,
    stopTime: null,
    step: getNumberStepByStatus('–í –±–æ—Ç–µ'),
    comment: '',
    images: [],
    lastLoadImage: null,
    lastMessage: null,
    isFinish: false,
    offerId: null,
    status: '–í –±–æ—Ç–µ',
    location: null,
    errorStatus: null,
    countTryError: 0,
    deliveryDate: null,
    recivingDate: null,
    conversation: null,
    lastCommand: null,
    times: null,
    isRestore: false,
    itsSubscriber: false,
    userArticules: null,
    dataForCash: null,
    price: null,
    realStatus: null,
    checkWb: null,
  };
}

export function createContinueSessionData(
  data: ISessionData,
  articul: string,
  offer: string,
  key?: string,
): ISessionData {
  return {
    data: {
      offerId: data.offerId,
      title: offer,
      cash: null,
      priceForYou: null,
      priceWb: null,
      image: null,
      id: null,
      articul: articul,
      keys: key,
      filter: data?.data?.filter,
    },
    sessionId: data.sessionId,
    user: data.user,
    chat_id: data.chat_id,
    startTime: data.startTime,
    stopBuyTime: data.stopBuyTime,
    stopTime: data.stopTime,
    step: data.step,
    images: data.images,
    offerId: data.offerId,
    status: data.status,
    deliveryDate: data.deliveryDate,
    recivingDate: data.recivingDate,
    isFinish: false,
    location: null,
    comment: null,
    countTryError: 0,
    isRestore: true,
    price: data.price,
    realStatus: data.realStatus,
    checkWb: data.checkWb,
    dataForCash: data.dataForCash,
    imgCart: data.imgCart,
    imgGood: data.imgGood,
    imgRecieved: data.imgRecieved,
    imgOrder: data.imgOrder,
    imgSearch: data.imgSearch,
    imgShtrihCode: data.imgShtrihCode,
  };
}
export function updateSessionByField(
  session: ISessionData,
  field: string,
  data: string | ITelegramWebApp,
): ISessionData {
  session[field] = data;
  return session;
}
/**
 * –æ–±–Ω–æ–ª—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞ (–±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É)
 */
export function updateSessionByStep(
  session: ISessionData,
  data?: string,
  isPhotoMsg?: boolean,
): ISessionData {
  const { status } = session;

  switch (status) {
    case '–í –±–æ—Ç–µ':
      break;
    case '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π':
      session.stopTime = getTimeWithTz();
      break;
    case '–í—ã–±–æ—Ä —Ä–∞–∑–¥–∞—á–∏':
      session.stopTime = getTimeWithTz();
      break;
    case '–ü–æ–∏—Å–∫':
      session.status = status;
      session.imgSearch = data;
      session.stopTime = getTimeWithTz();
      break;
    case '–ö–æ—Ä–∑–∏–Ω–∞':
      session.status = status;
      session.imgCart = data;
      session.stopTime = getTimeWithTz();
      break;
    case '–ó–∞–∫–∞–∑':
      session.stopBuyTime = getTimeWithTz();
      session.stopTime = getTimeWithTz();
      session.imgOrder = data;
      session.status = status;
      break;
    case '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏':
      session.stopTime = getTimeWithTz();
      session.status = status;
      break;
    case '–ü–æ–ª—É—á–µ–Ω':
      session.stopTime = getTimeWithTz();
      session.status = status;
      session.imgRecieved = data;
      break;

    case '–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è':
      session.stopTime = getTimeWithTz();
      session.status = status;
      break;
    case '–û—Ç–∑—ã–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ':
      // case STEPS.–û—Ç–∑—ã–≤.step:
      //   //session.status = '–û—Ç–∑—ã–≤';
      //   //session.stopTime = getTimeWithTz();
      //   session.step = STEPS['–®—Ç—Ä–∏—Ö-–∫–æ–¥'].step;
      // //break;
      session.stopTime = getTimeWithTz();
      session.status = status;
      break;
    case '–®—Ç—Ä–∏—Ö-–∫–æ–¥':
      session.stopTime = getTimeWithTz();
      session.status = status;
      session.imgShtrihCode = data;
      break;
    case '–¢–æ–≤–∞—Ä':
      session.stopTime = getTimeWithTz();
      session.status = status;
      session.imgGood = data;
      break;
    case '–ß–µ–∫':
      session.stopTime = getTimeWithTz();
      session.status = status;
      break;
    case '–ß–µ–∫Wb':
      session.checkWb = data;
      session.stopTime = getTimeWithTz();
      session.status = status;
      break;
    case '–ß–µ–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π':
      session.stopTime = getTimeWithTz();
      session.status = status;
      break;
    case '–¶–µ–Ω–∞':
      session.stopTime = getTimeWithTz();
      session.status = status;
      break;
    case '–§–∏–Ω–∏—à':
      session.stopTime = getTimeWithTz();
      session.isFinish = true;
      session.dataForCash = data;
    default:
      break;
  }

  if (isPhotoMsg && session.status !== '–ß–µ–∫Wb') {
    session.images = !session.images ? [data] : [...session.images, data];
    session.lastLoadImage = data;
  }

  // if (step !== STEPS['–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'].step) {
  //   session = nextStep(session);
  // }
  return session;
}

export function getNextStepStatusByNumber(
  currentStep: number,
  onlyActive: boolean,
): BotStatus {
  let nextNumberStepsAll;
  if (!onlyActive) {
    nextNumberStepsAll = Object.values(STEPS).filter((x) => x.step === 0);
  } else {
    nextNumberStepsAll = Object.values(STEPS).filter(
      (x) => x.isActive && x.step === 0,
    );
  }
  return nextNumberStepsAll[currentStep].value as BotStatus;
}

/**
 * –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è step –∏ status
 */
export function nextStep(
  session: ISessionData,
  onlyActive: boolean,
): ISessionData {
  session.status = getNextStepStatusByNumber(session.step, onlyActive);
  session.step = session.step + 1;

  return session;
}

export function getTextForFirstStep(data: ITelegramWebApp, wbScreen?: string) {
  const {
    title,
    keys,
    cash,
    priceWb,
    priceForYou,
    times,
    location,
    image,
    filter,
  } = data;
  const useFilterForHelpSearch = filter
    ? `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä üëâ: ${filter.toUpperCase()} \n`
    : '';
  const caption =
    `${title}` +
    '\n\n' +
    '‚ùå–¶–µ–Ω–∞ –Ω–∞ WB ~' +
    priceWb +
    ' ‚ÇΩ (—ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–π —Å–∫–∏–¥–∫–∏)' +
    '\n' +
    `‚ùóÔ∏è –ö–µ—à–±—ç–∫ ~ ${cash}‚ùóÔ∏è \n` +
    `‚≠êÔ∏è –í–∞—à–∞ —Ü–µ–Ω–∞ ~ ${priceForYou} ‚ÇΩ ü´∂ \n` +
    '\n' +
    FIRST_STEP_LINK +
    FIRST_STEP_KEY_VALUE +
    `\nüîé ${keys.toUpperCase()}\n\n` +
    getMessageForTimeOffer(times) +
    useFilterForHelpSearch +
    //FIRST_STEP_A +
    (location ? `‚ùóÔ∏è–†–∞–∑–¥–∞—á–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: ${location}‚ùóÔ∏è\n` : '');
  return [
    {
      type: 'photo',
      media: wbScreen || image,
      caption: caption,
    },
  ];
}
export const createMediaForArticul = (url?: string, caption?: string) => {
  return [
    {
      type: 'photo',
      media: url || WEB_APP + STEPS['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π'].image,
      caption: caption || STEP_EXAMPLE_TEXT_UP,
    },
  ];
};

export const getMessageForTimeOffer = (times: string[]) => {
  try {
    if (!times || !times.length || times.length === 0) return '';

    if (times[1] === TIME_FULL) {
      if (getDifferenceInDays(times[0]) <= 0) {
        return getDifferenceInMinutes(times[0]) >= 0
          ? ''
          : `‚ùóÔ∏è–ù–∞—á–∞–ª–æ —Ä–∞–∑–¥–∞—á–∏ ${dateFormatNoTZ(times[0], FORMAT_DATE_SIMPLE)}‚ùóÔ∏è\n\n`;
      } else {
        return '–í—Ä–µ–º—è —Ä–∞–∑–¥–∞—á–∏ –∏—Å—Ç–µ–∫–ª–æ. –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n';
      }
    }
    return getDifferenceInMinutes(`${getDate()} ${times[0]}`) > 0
      ? ''
      : `‚ùóÔ∏è–ù–∞—á–∞–ª–æ —Ä–∞–∑–¥–∞—á–∏ –≤ ${times[0]}‚ùóÔ∏è\n\n`;
  } catch (e) {
    console.log(e);
    return '';
  }
};

export function getTextByNextStep(
  status: BotStatus,
  startTime: string,
  name: string,
): string {
  switch (status) {
    case '–í—ã–±–æ—Ä —Ä–∞–∑–¥–∞—á–∏':
      return FIRST_STEP_LINK;
    case '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º':
    case '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π':
      return FIRST_STEP_LINK + getNumberText('–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π', null, name);
    case '–ü–æ–∏—Å–∫':
      return FIRST_STEP_A + getNumberText('–ü–æ–∏—Å–∫', null, name);
    case '–ö–æ—Ä–∑–∏–Ω–∞':
      return FIRST_STEP_CART + getNumberText('–ö–æ—Ä–∑–∏–Ω–∞', null, name);
    case '–ó–∞–∫–∞–∑':
      return FIRST_STEP_C + getNumberText('–ó–∞–∫–∞–∑', null, name);
    case '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏':
      return '–í–≤–µ–¥–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 12.12.2024) üóìÔ∏è';
    case '–ü–æ–ª—É—á–µ–Ω':
      return SECOND_STEP + getNumberText('–ü–æ–ª—É—á–µ–Ω', null, name);
    case '–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è':
      return '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 12.12.2024) üóìÔ∏è';
    // case STEPS['–û—Ç–∑—ã–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'].step:
    // //return THREE_STEP + getNumberText(step, null, name);
    // case STEPS.–û—Ç–∑—ã–≤.step:
    // //   return (
    // //     FOUR_STEP + FOUR_STEP_A + FOUR_STEP_B + getNumberText(step, null, name)
    // //   );
    case '–®—Ç—Ä–∏—Ö-–∫–æ–¥':
      return FIVE_STEP + getNumberText('–®—Ç—Ä–∏—Ö-–∫–æ–¥', null, name);
    case '–¢–æ–≤–∞—Ä':
      return SEVEN_STEP + getNumberText('–¢–æ–≤–∞—Ä', null, name);
    case '–ß–µ–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π':
    case '–ß–µ–∫Wb':
      return SIX_STEP_LINK + getNumberText('–ß–µ–∫Wb', null, name);
    case '–ß–µ–∫':
      return SIX_STEP + getNumberText('–ß–µ–∫', null, name);
    case '–¶–µ–Ω–∞':
      return '–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É üí∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞ wildberries –∑–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä üëá';
    case '–§–∏–Ω–∏—à':
      return (
        FOOTER +
        'üí∞–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∞–º –∫–µ—à–±—ç–∫–∞üí∞.\n' +
        '–ë–∞–Ω–∫, –§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω.\n–ù–∞–ø—Ä–∏–º–µ—Ä, –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –ë–∞–ª–∞–ª–∞–π–∫–∏–Ω–∞ –õ–∏—Ä–∞ –†–æ—è–ª—å–µ–≤–Ω–∞, 89002716500)\n–ñ–¥–∏—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–πüòâ'
      );
    default:
      return '';
  }
}

function getNumberText(statusName: BotStatus, startTime: string, name: string) {
  const textOffer = `\n‚Üí ${name}\n\n`;
  const finish_txt = `–î–æ —Ñ–∏–Ω–∏—à–∞ `;
  const minutes = startTime
    ? LIMIT_TIME_IN_MINUTES_FOR_BUY - getDifferenceInMinutes(startTime)
    : null;
  const waitTime = minutes ? `(–æ—Å—Ç–∞–ª–æ—Å—å ${minutes} –º–∏–Ω. –¥–ª—è –∑–∞–∫–∞–∑–∞)` : '';
  const step = getNumberStepByStatus(statusName);
  return (
    (finish_txt + STEP_TEXT_NUMBER_EMOJI(step) + statusName === '–ó–∞–∫–∞–∑'
      ? ` ${waitTime}\n`
      : '') + textOffer
  );
}

export function getOffer(data: IOffer) {
  const defaultLink =
    '‚úÖ –î–ª—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ @Dowry_wb !\n';
  const offer =
    `üî•${data.fields['Name']}üî•` +
    '\n' +
    data.fields['–û–ø–∏—Å–∞–Ω–∏–µ'] +
    '\n' +
    '‚ùå–¶–µ–Ω–∞ –Ω–∞ WB ~' +
    data.fields['–¶–µ–Ω–∞ WB'] +
    '\n' +
    `‚ùóÔ∏è –ö–µ—à–±—ç–∫ ~ ${data.fields['–ö–µ—à–±—ç–∫']}‚ùóÔ∏è \n` +
    `‚≠êÔ∏è –í–∞—à–∞ —Ü–µ–Ω–∞ ~ ${data.fields['–í–∞—à–∞ —Ü–µ–Ω–∞']} ü´∂ \n` +
    `${!data.fields.–ü–µ—Ä–µ—Ö–æ–¥ || data.fields.–ü–µ—Ä–µ—Ö–æ–¥?.includes('–ß–∞—Ç') ? defaultLink : ''} ` +
    `–ë—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—èü•∞ü•∞ü•∞ \n`;

  const medias = [];
  const countPhotos = data.fields['–§–æ—Ç–æ'].length;
  for (let i = 0; i < data.fields['–§–æ—Ç–æ'].length; i++) {
    medias.push({
      type: 'photo',
      media: data.fields['–§–æ—Ç–æ'][i].thumbnails.full.url,
      caption: countPhotos - 1 === i ? offer : '',
    });
  }
  return medias;
}

export const getLinkForOffer = (data: IOffer) => {
  const link = `‚úÖ –î–ª—è –∑–∞–∫–∞–∑–∞ <a href='${data.fields.–°—Å—ã–ª–∫–∞}'>–ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç</a>\n`;
  return data.fields.–ü–µ—Ä–µ—Ö–æ–¥?.includes('–ë–æ—Ç') ? link : null;
};

export const parseUrl = (url: string, articul: string): boolean => {
  if (url.trim() === articul.trim()) return true;

  if (!url) return false;
  return url.indexOf(articul.trim()) > 0;
};

export const parseCheckUrl = (url: string): boolean => {
  if (!url) return false;
  if (url.includes('receipt.wb')) return true;
  return false;
};

export const locationCheck = (
  locationOffer: string,
  locationUser: string,
): { status: boolean; text: string } => {
  if (!locationUser) return { status: false, text: '–õ–æ–∫–∞—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞' };

  return locationUser.toLowerCase().includes(locationOffer.toLowerCase())
    ? { status: true, text: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —à–∞–≥ 1Ô∏è‚É£' }
    : {
        status: false,
        text: `–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (${locationUser}) –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–∞—á–µ`,
      };
};

export const getAdminChatId = () => {
  return process.env.NODE_ENV === 'development'
    ? TELEGRAM_MESSAGE_CHAT_TEST
    : TELEGRAM_MESSAGE_CHAT_PROD;
};

export const getNotificationValue = (
  notifications: INotifications,
  statisticNotifications: INotificationStatistics,
  status: BotStatus,
  startTime: string,
  filter: string,
) => {
  let nextStatusNotification: BotStatus;
  switch (status) {
    case '–í—ã–±–æ—Ä —Ä–∞–∑–¥–∞—á–∏':
    case '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π':
      nextStatusNotification = getNextStepStatusByNumber(
        getNumberStepByStatus(status),
        true,
      );
    case '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º':
      const minutesForChoose =
        getDifferenceInMinutes(startTime) -
        (filter
          ? LIMIT_TIME_IN_MINUTES_FOR_ORDER_WITH_FILTER
          : LIMIT_TIME_IN_MINUTES_FOR_ORDER);
      if (minutesForChoose > 0) {
        nextStatusNotification = '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ';
      }
      break;
    case '–ü–æ–∏—Å–∫':
    case '–ö–æ—Ä–∑–∏–Ω–∞':
      const minutes =
        getDifferenceInMinutes(startTime) -
        (filter
          ? LIMIT_TIME_IN_MINUTES_FOR_BUY_WITH_FILTER
          : LIMIT_TIME_IN_MINUTES_FOR_BUY);

      if (minutes > 0) {
        nextStatusNotification = '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ';
      } else {
        nextStatusNotification = status === '–ü–æ–∏—Å–∫' ? '–ö–æ—Ä–∑–∏–Ω–∞' : '–ó–∞–∫–∞–∑';
      }
      break;
    default:
      nextStatusNotification = getNextStepStatusByNumber(
        getNumberStepByStatus(status),
        true,
      );
  }

  return filterNotificationValue(
    notifications,
    statisticNotifications,
    nextStatusNotification,
  );
};

export const filterNotificationValue = (
  notifications: INotifications,
  statisticNotifications: INotificationStatistics,
  status: BotStatus,
) => {
  let notification = null;
  let statistic = null;
  try {
    notification = notifications?.records.find(
      (x) => x.fields.–ù–∞–∑–≤–∞–Ω–∏–µ === status,
    );
    statistic =
      statisticNotifications?.records.length === 0
        ? null
        : statisticNotifications?.records.find(
            (x) =>
              x.fields.–®–∞–±–ª–æ–Ω &&
              x.fields.–®–∞–±–ª–æ–Ω.length &&
              x.fields.–®–∞–±–ª–æ–Ω[0] === notification.fields.Id,
          );
  } catch (e) {
    console.log('filterNotificationValue', e, status, statisticNotifications);
  } finally {
    return { notification, statistic, status };
  }
};

export const scheduleNotification = (
  status: BotStatus,
  stopTime: string,
  startTime: string,
  countSendNotification: number,
  dateDelivery: string,
) => {
  const days = getDifferenceInDays(dateDelivery || stopTime);

  switch (status) {
    case '–í—ã–±–æ—Ä —Ä–∞–∑–¥–∞—á–∏':
    case '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π':
    case '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º':
    case '–ö–æ—Ä–∑–∏–Ω–∞':
    case '–ü–æ–∏—Å–∫':
      const minutes =
        status === '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π' || status === '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º'
          ? getDifferenceInMinutes(getDate()) - LIMIT_TIME_IN_MINUTES_FOR_BUY
          : getDifferenceInMinutes(startTime) - LIMIT_TIME_IN_MINUTES_FOR_ORDER;
      console.log('scheduleNotification minutes=', status, startTime, minutes);

      return minutes > -40;
    case '–ó–∞–∫–∞–∑':
      if (countSendNotification === 0) {
        return dateDelivery ? days === 1 : days > 6;
      } else {
        return days > 2 && days < 4;
      }
    case '–ü–æ–ª—É—á–µ–Ω':
    case '–®—Ç—Ä–∏—Ö-–∫–æ–¥':
    case '–ß–µ–∫Wb':
    case '–¢–æ–≤–∞—Ä':
      return days === 1;
    default:
      return false;
  }
};

export const getTextForArticulError = (
  positionOnWB: string,
  countTryError: number,
  status: BrokeBotStatus,
  filter?: string,
) => {
  const helpText =
    positionOnWB && countTryError <= COUNT_TRY_ERROR
      ? `\n–≠—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ ${positionOnWB} —Å—Ç—Ä–∞–Ω–∏—Ü–µ.`
      : '';
  if (countTryError <= COUNT_TRY_ERROR) {
    let filterText = '';
    if (countTryError === COUNT_TRY_ERROR - 1) {
      filterText = filter
        ? '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: üëâ' + filter.toUpperCase()
        : '';
    }
    return (
      '–ê—Ä—Ç–∏–∫—É–ª—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Çü•π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã –Ω–∞—à–ª–∏ —Ç–æ–≤–∞—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, —Ü–µ–Ω—É.' +
      helpText +
      filterText
    );
  }

  switch (status) {
    case 'operator':
      return '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞üë©‚Äçüíª';
    case 'wait':
    case 'check_articul':
      return '–ê—Ä—Ç–∏–∫—É–ª—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" ‚§µÔ∏è';
    default:
      return status;
  }
};

export const getArticulErrorStatus = (
  errorStatus: BrokeBotStatus,
): BrokeBotStatus => {
  switch (errorStatus) {
    case 'operator':
      return 'wait';
    default:
      return 'wait';
  }
};

export const getNumberStepByStatus = (stepName: BotStatus): number | null => {
  let filteredSteps;
  if (Object.values(STEPS).find((x) => x.value === stepName && x.isActive)) {
    filteredSteps = Object.values(STEPS)
      .filter((x) => x.step === 0 && x.isActive)
      .map((x) => x.value);
  } else {
    filteredSteps = Object.values(STEPS)
      .filter((x) => x.step === 0)
      .map((x) => x.value);
  }
  const index = filteredSteps.indexOf(stepName);

  if (index !== -1) {
    return index + 1;
  } else {
    return -1;
  }
};

export const checkTypeStepByName = (
  stepName: BotStatus,
  type: 'image' | 'text',
) => {
  return Object.values(STEPS)
    .find((x) => x.value === stepName)
    .typeStep.includes(type);
};

export const getErrorTextByStep = (
  statusName: BotStatus,
): { error: string; url?: string } | null => {
  const stepInfo = getStepInfoByNumber(statusName);
  if (!stepInfo) return null;
  return {
    error:
      STEP_ERROR_TEXT +
      stepInfo.erroText +
      (STEPS[stepInfo.value]?.image ? STEP_EXAMPLE_TEXT_DOWN : ''),
    url: STEPS[stepInfo.value]?.image
      ? WEB_APP + STEPS[stepInfo.value]?.image
      : null,
  };
};
export const getStepInfoByNumber = (statusName: BotStatus) => {
  if (!statusName) return null;
  return Object.values(STEPS).find((x) => x.value === statusName);
};
/**
 –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è
 */
export const getLastSession = (dataBuyer: IBot[] | null) => {
  if (!dataBuyer) return null;

  const filterData = dataBuyer.filter(
    (x) =>
      x.fields.–°—Ç–∞—Ç—É—Å !== '–í –±–æ—Ç–µ' &&
      x.fields.–°—Ç–∞—Ç—É—Å !== '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ' &&
      x.fields.–°—Ç–∞—Ç—É—Å !== '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ª–æ–∫–∞—Ü–∏–µ–π' &&
      x.fields.–°—Ç–∞—Ç—É—Å !== '–õ–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤' &&
      x.fields.–°—Ç–∞—Ç—É—Å !== '–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' &&
      x.fields.–°—Ç–∞—Ç—É—Å !== '–í –æ–∂–∏–¥–∞–Ω–∏–∏' &&
      !x.fields.–§–∏–Ω–∏—à,
  );
  if (!filterData || filterData.length === 0) return null;
  if (filterData.length === 1) return filterData[0].fields.SessionId;
  return filterData.sort(
    (a, b) =>
      getDifferenceInMinutes(a.fields.StopTime) -
      getDifferenceInMinutes(b.fields.StopTime),
  )[0].fields.SessionId;
};

/**
 * –ø–æ–∏—Å–∫ —Ä–∞–∑–¥–∞—á, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ –§–∏–Ω–∏—à –æ—Ç–º–µ—á–µ–Ω–æ
 */
export const getUserOfferIdsIsFinsih = (data: IBot[]) => {
  return data?.map((x) => {
    if (x.fields.–§–∏–Ω–∏—à) {
      return x.fields.OfferId[0];
    }
  });
};

export const getTextForSubscriber = (info: ChatMember) => {
  const defaultResult = {
    text: `‚úâÔ∏è –ü–æ–¥–ø–∏—à–∏—Å—å –≤ –≥—Ä—É–ø–ø—É DOWRY —Ä–∞–∑–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫ (–¥–æ 100% –∫–µ—à–±—ç–∫–∞) –∏ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–≤—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é).<a href='${SUBSCRIBE_CHAT_URL}'> –î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º.</a>`,
    status: false,
  };
  if (!info) return defaultResult;
  if (
    info.status === 'member' ||
    info.status === 'administrator' ||
    info.status === 'creator'
  ) {
    return {
      text: `‚úÖ –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ <a href='${SUBSCRIBE_CHAT_URL}'>DOWRY —Ä–∞–∑–¥–∞—á–∏</a>`,
      status: true,
    };
  }
  return defaultResult;
};

export const getUserOffersReady = (dataBuyer: IBot[]) => {
  if (!dataBuyer) return null;
  return dataBuyer.reduce(function (data, record) {
    if (record.fields.–§–∏–Ω–∏—à) {
      return (data += `‚úîÔ∏è ${removeEmojis(record.fields.–†–∞–∑–¥–∞—á–∞)}\n`);
    }
    return data;
  }, '');
};

export const getUserBenefit = (
  userOffers: IOffers,
  sumFromDistributions: number,
): { text: string; sum: number } => {
  try {
    if (
      (!userOffers ||
        !userOffers.records ||
        userOffers?.records?.length === 0) &&
      sumFromDistributions == 0
    ) {
      return { text: '–ù–∞—á–Ω–∏ –∫–æ–ø–∏—Ç—å üí∞ –Ω–∞ –ø–æ–∫—É–ø–∫–∞—Ö', sum: 0 };
    }

    const benefit = userOffers?.records?.reduce(function (sum, record) {
      return (sum +=
        parseInt(record.fields['–¶–µ–Ω–∞ WB']) -
        parseInt(record.fields['–í–∞—à–∞ —Ü–µ–Ω–∞']));
    }, 0);
    return {
      text: `–í–∞—à–∞ –æ–±—â–∞—è –≤—ã–≥–æ–¥–∞ üí∞: ${benefit + sumFromDistributions} —Ä—É–±.`,
      sum: benefit + sumFromDistributions,
    };
  } catch (e) {
    console.log(e, userOffers, sumFromDistributions);
    return { text: '–ù–∞—á–Ω–∏ –∫–æ–ø–∏—Ç—å üí∞ –Ω–∞ –ø–æ–∫—É–ø–∫–∞—Ö', sum: 0 };
  }
};

export const itsSubscriber = (member?: ChatMember) => {
  if (!member) return false;
  return (
    member.status === 'administrator' ||
    member.status === 'creator' ||
    member.status === 'member'
  );
};

export const getFilterDistribution = (
  dataDistributions: IDistribution[],
  dataBuyer: IBot[],
) => {
  const filterDistributionData = dataDistributions?.reduce(function (
    arr,
    record,
  ) {
    if (
      !dataBuyer ||
      dataBuyer.length === 0 ||
      !dataBuyer?.find(
        (x) => x.fields?.–ê—Ä—Ç–∏–∫—É–ª == record.fields['–ê—Ä—Ç–∏–∫—É–ª WB'][0].toString(),
      )
    ) {
      arr.push({
        name: record.fields.–†–∞–∑–¥–∞—á–∞,
        sum: record.fields['–í—ã–ø–ª–∞—á–µ–Ω–Ω—ã–π –∫–µ—à–±–µ–∫'],
        date: record.fields['–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'],
      });
      return arr;
    }
  }, []);
  const sum =
    filterDistributionData?.reduce((accumulator, record) => {
      return accumulator + record.sum;
    }, 0) || 0;
  const offers =
    filterDistributionData?.reduce((accumulator, record) => {
      return (accumulator += `‚úîÔ∏è ${record.name}\n`);
    }, '') || '';
  return { sum, offers };
};

/**
 * –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º step
 */
export const getArticulesByUser = (dataBuyer: IBot[]) => {
  try {
    if (!dataBuyer || dataBuyer.length === 0) return null;
    return dataBuyer
      ?.filter(
        (x) =>
          x.fields.–°—Ç–∞—Ç—É—Å !== '–ë–æ—Ç —É–¥–∞–ª–µ–Ω' &&
          x.fields.–°—Ç–∞—Ç—É—Å !== '–í –±–æ—Ç–µ' &&
          x.fields.–°—Ç–∞—Ç—É—Å !== '–í –æ–∂–∏–¥–∞–Ω–∏–∏' &&
          x.fields.–°—Ç–∞—Ç—É—Å !== '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ' &&
          x.fields.–°—Ç–∞—Ç—É—Å !== '–õ–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤' &&
          x.fields.–°—Ç–∞—Ç—É—Å !== '–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
      )
      ?.map((x) => x.fields.–ê—Ä—Ç–∏–∫—É–ª)
      ?.filter((x) => x !== undefined);
  } catch (error) {
    console.log('getArticulesByUser=', error);
    return null;
  }
};

/**
–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)  
 */
export const checkOnExistArticuleByUserOrders = (
  articule: string,
  articules?: string[],
): boolean => {
  if (!articules || !Array.isArray(articules)) return false;
  if (articules.find((x) => x === articule)) return true;
  return false;
};

/**
 * –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export const getTextForFeedbackByStatus = (
  status: FeedbackStatus,
  date?: string,
) => {
  switch (status) {
    case '–ë–µ–∑ —Ñ–æ—Ç–æ':
      return `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù. –°–ø–∞—Å–∏–±–æ. –û—Ç–∑—ã–≤ üî•. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ wildberries ${date || ''} (${status.toLocaleLowerCase()})üìµ`;
    case '–û—Ç–ª–æ–∂–∏—Ç—å –æ—Ç–∑—ã–≤':
      return '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù. –ü—É–±–ª–∏–∫–∞—Ü–∏—é –æ—Ç–∑—ã–≤–∞ –ø–æ–∫–∞ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É –≤ –±–æ—Ç–µ.';
    case '–° —Ñ–æ—Ç–æ':
      return `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù. –°–ø–∞—Å–∏–±–æ. –û—Ç–∑—ã–≤ üî•. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ wildberries ${date || ''} (${status.toLocaleLowerCase()})üì∏`;
    case '–¢–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∞':
      return '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ü§ù. –ü–æ—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ wildberries –ø—Ä–æ—Å—Ç–æ –æ—Ü–µ–Ω–∫—É 5* –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.';
    default:
      return '–£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞';
  }
};

export const getChatIdFormText = (text: string) => {
  if (!text) return null;

  const regex = /chat_id=(\d+)/;
  const match = text.match(regex);

  if (match) {
    const chatId = match[1];
    console.log(`–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π chat_id: ${chatId}`);
    return chatId;
  } else {
    console.log('chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  }
};
/**
 * –º–µ—Ç–æ–¥-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
 */
export const getCorrectStatus = (status: BotStatus) => {
  if (!status) return null;
  if (status === '–û—Ç–∑—ã–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' || status === '–û—Ç–∑—ã–≤') {
    return '–®—Ç—Ä–∏—Ö-–∫–æ–¥';
  }
  if (status === '–ß–µ–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π' || status === '–ß–µ–∫') return '–ß–µ–∫Wb';
  return status;
};

/**
 * —Ä–∞–∑–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ'
 */
export const getTimeoutArticles = (data: IBot[]) => {
  try {
    if (!data || !data?.length) return null;
    const result = data
      .filter((x) => x.fields.–°—Ç–∞—Ç—É—Å === '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ')
      ?.map((x) => 'üòø' + x.fields.–†–∞–∑–¥–∞—á–∞)
      ?.join('\n\n');
    if (result) return 'üëâ–í–∞—à–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ä–∞–∑–¥–∞—á–∏.\n' + result;
    return result;
  } catch (error) {
    return null;
  }
};

/**
 * –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
 */
export const getTextForHistoryOrders = (
  sum: number,
  timeOutOrders?: string,
) => {
  if (sum === 0 && !timeOutOrders) return '–í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–∏–ª–∏ üò¢';
  if (sum > 0 && !timeOutOrders) return '–í—Å–µ —Ä–∞–∑–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ‚úåÔ∏è';
  return timeOutOrders;
};

export const removeEmojis = (text: string) => {
  if (!text) return '';
  const regex = /[\u{1F525}]/gu;

  return text.replace(regex, '');
};

/**
 * –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—ç—à–µ?
 */

export const itRequestWithCachQuestion = (message: string) =>
  CASH_STOP_WORDS.find((x) => message.includes(x));

export const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
