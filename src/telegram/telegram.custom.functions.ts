import { ISessionData, ITelegramWebApp } from './telegram.interface';
import { v4 as uuidv4 } from 'uuid';

import {
  FIRST_STEP,
  HEADER,
  FIRST_STEP_A,
  //FIRST_STEP_B,
  FIRST_STEP_C,
  SECOND_STEP,
  THREE_STEP,
  FOUR_STEP,
  FOUR_STEP_A,
  FOUR_STEP_B,
  FOOTER,
  TELEGRAM_BOT_NAME,
  FIRST_STEP_LINK,
  STEPS,
  TELEGRAM_MESSAGE_CHAT_PROD,
  TELEGRAM_MESSAGE_CHAT_TEST,
  LIMIT_TIME_IN_MINUTES_FOR_ORDER,
  COUNT_TRY_ERROR,
  FIVE_STEP,
  SIX_STEP,
  LIMIT_TIME_IN_MINUTES_FOR_BUY,
} from './telegram.constants';
import { User } from '@grammyjs/types';
import { IOffer } from 'src/airtable/types/IOffer.interface';
import { BotStatus, BrokeBotStatus } from 'src/airtable/types/IBot.interface';
import { INotifications } from 'src/airtable/types/INotification.interface';
import { INotificationStatistics } from 'src/airtable/types/INotificationStatistic.interface';
import {
  FORMAT_DATE_SIMPLE,
  TIME_FULL,
  getDifferenceInDays,
  getDifferenceInMinutes,
  getTimeWithTz,
  dateFormatNoTZ,
  getDate,
} from 'src/common/date/date.methods';

export function sayHi(first_name: string, username: string): string {
  return `\n\n\n\n\Ô∏è–ü—Ä–∏–≤–µ—Ç, ${first_name || username}!‚úåÔ∏è` + '\n\n–í –ø—É—Ç—å ‚§µ\n';
}

export function sendToSecretChat(
  from: User,
  comment: string,
  order: string,
  chatId: string | number,
  name: string,
  status?: BotStatus,
) {
  const userValue = getUserName(from);
  const statusText = status ? ` (${status})` : '';
  const typeMessage = order
    ? `–†–∞–∑–¥–∞—á–∞:${name} ${statusText}`
    : '–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
  const instruction =
    '\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /message_send,c–∫–æ–ø–∏—Ä—É–π—Ç–µ chat_id –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å—à–µ';
  const userComment = comment
    ? `\n${typeMessage} ${order}\n‚û°Ô∏èchat_id=${chatId}\n–°–æ–æ–±—â–µ–Ω–∏–µ:${comment}`
    : '';
  return `‚ùì–°—Ç–∞—Ä—Ç: ${getTimeWithTz()}\n${userValue.fio} username=${userValue.userName} 
  ${userComment}${instruction}‚ùì`;
}
export const createCommentForDb = (comment: string, isAnswer?: boolean) => {
  if (!comment) return '';
  const emoji = isAnswer ? '‚úÖ' : '‚ùì';
  return `${getTimeWithTz()}\n${emoji} ${comment}`;
};

export const getUserName = (from: User) => {
  const { first_name, last_name, username } = from;
  return {
    fio: `${first_name} ${last_name || ''}`,
    userName: `${username || ''}`,
  };
};

export function createInitialSessionData(
  id?: string,
  user?: string,
): ISessionData {
  return {
    sessionId: uuidv4(),
    user: user,
    chat_id: id || null,
    startTime: getTimeWithTz(),
    stopBuyTime: null,
    stopTime: null,
    step: STEPS.INBOT.step,
    comment: '',
    images: [],
    lastLoadImage: null,
    lastMessage: null,
    isFinish: false,
    offerId: null,
    status: '–í –±–æ—Ç–µ',
    location: null,
    errorStatus: null,
    countTryError: 0,
    deliveryDate: null,
    conversation: null,
    lastCommand: null,
    times: null,
  };
}

export function createContinueSessionData(
  data: ISessionData,
  articul: string,
  offer: string,
  key?: string,
): ISessionData {
  return {
    data: {
      offerId: data.offerId,
      title: offer,
      cash: null,
      priceForYou: null,
      priceWb: null,
      image: null,
      id: null,
      articul: articul,
      keys: key,
    },
    sessionId: data.sessionId,
    user: data.user,
    chat_id: data.chat_id,
    startTime: data.startTime,
    stopBuyTime: data.stopBuyTime,
    stopTime: data.stopTime,
    step: data.step,
    images: data.images,
    offerId: data.offerId,
    status: data.status,
    deliveryDate: data.deliveryDate,
    isFinish: false,
    location: null,
    comment: null,
  };
}
export function updateSessionByField(
  session: ISessionData,
  field: string,
  data: string | ITelegramWebApp,
): ISessionData {
  session[field] = data;
  return session;
}

export function updateSessionByStep(
  session: ISessionData,
  data?: string,
  isPhotoMsg?: boolean,
): ISessionData {
  const { step } = session;
  switch (step) {
    case STEPS.INBOT.step:
    case STEPS.CHECK_ARTICUL.step:
      break;
    case STEPS.CHOOSE_OFFER.step:
      session.stopTime = getTimeWithTz();
      break;
    case STEPS.SEARCH.step:
      session.status = '–ü–æ–∏—Å–∫';
      session.stopTime = getTimeWithTz();
      break;
    case STEPS.ORDER.step:
      session.stopBuyTime = getTimeWithTz();
      session.status = '–ó–∞–∫–∞–∑';
      break;
    case STEPS.DELIVERY_DATE.step:
      session.status = '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏';
      break;
    case STEPS.RECEIVED.step:
      session.status = '–ü–æ–ª—É—á–µ–Ω';
      break;
    case STEPS.COMMENT_ON_CHECK.step:
      session.comment = data;
      session.stopTime = getTimeWithTz();
      break;
    case STEPS.COMMENT.step:
      session.status = '–û—Ç–∑—ã–≤';
      session.stopTime = getTimeWithTz();
      break;
    case STEPS.SHTRIH_CODE.step:
      session.status = '–®—Ç—Ä–∏—Ö-–∫–æ–¥';
      session.stopTime = getTimeWithTz();
      break;
    case STEPS.CHECK.step:
      session.stopTime = getTimeWithTz();
      session.status = '–ß–µ–∫';
      session.isFinish = true;
      break;
    default:
      break;
  }

  if (isPhotoMsg) {
    session.images = !session.images ? [data] : [...session.images, data];
    session.lastLoadImage = data;
  }

  if (step !== STEPS.DELIVERY_DATE.step) {
    session = nextStep(session);
  }

  return session;
}
export function nextStep(session: ISessionData): ISessionData {
  console.log('session=', session);
  session.step = session.step + 1;
  return session;
}

export function getTextForFirstStep(data: ITelegramWebApp) {
  const { title, keys, cash, priceWb, priceForYou, times, location, image } =
    data;
  const caption =
    `üî•${title}üî•` +
    '\n\n' +
    '‚ùå–¶–µ–Ω–∞ –Ω–∞ WB ~' +
    priceWb +
    ' ‚ÇΩ' +
    '\n' +
    `‚ùóÔ∏è –ö–µ—à–±—ç–∫ ~ ${cash}‚ùóÔ∏è \n` +
    `‚≠êÔ∏è –í–∞—à–∞ —Ü–µ–Ω–∞ ~ ${priceForYou} ‚ÇΩ ü´∂ \n` +
    '\n' +
    HEADER +
    FIRST_STEP +
    '‚û°Ô∏è ' +
    keys +
    '\n\n' +
    getMessageForTimeOffer(times) +
    FIRST_STEP_LINK +
    //FIRST_STEP_A +
    (location ? `‚ùóÔ∏è–†–∞–∑–¥–∞—á–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: ${location}‚ùóÔ∏è\n` : '');

  return [
    {
      type: 'photo',
      media: image,
      caption: caption,
    },
  ];
}
export const getMessageForTimeOffer = (times: string[]) => {
  try {
    if (!times || !times.length || times.length === 0) return '';

    if (times[1] === TIME_FULL) {
      if (getDifferenceInDays(times[0]) <= 0) {
        return getDifferenceInMinutes(times[0]) >= 0
          ? ''
          : `‚ùóÔ∏è–ù–∞—á–∞–ª–æ —Ä–∞–∑–¥–∞—á–∏ ${dateFormatNoTZ(times[0], FORMAT_DATE_SIMPLE)}‚ùóÔ∏è\n\n`;
      } else {
        return '–í—Ä–µ–º—è —Ä–∞–∑–¥–∞—á–∏ –∏—Å—Ç–µ–∫–ª–æ. –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Ä–∞–∑–¥–∞—á—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n\n';
      }
    }
    return getDifferenceInMinutes(`${getDate()} ${times[0]}`) > 0
      ? ''
      : `‚ùóÔ∏è–ù–∞—á–∞–ª–æ —Ä–∞–∑–¥–∞—á–∏ –≤ ${times[0]}‚ùóÔ∏è\n\n`;
  } catch (e) {
    console.log(e);
    return '';
  }
};

export function getTextByNextStep(
  step: number,
  startTime: string,
  name: string,
): string {
  switch (step) {
    case STEPS.CHOOSE_OFFER.step:
      return FIRST_STEP_LINK;
    case STEPS.SEARCH.step:
    case STEPS.CHECK_ARTICUL.step:
      return FIRST_STEP_A + getNumberText(step, startTime, name);
    case STEPS.ORDER.step:
      return FIRST_STEP_C + getNumberText(step, startTime, name);
    case STEPS.DELIVERY_DATE.step:
      return '–í–≤–µ–¥–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 12.12.2024) üóìÔ∏è';
    case STEPS.RECEIVED.step:
      return SECOND_STEP + getNumberText(step, null, name);
    case STEPS.COMMENT_ON_CHECK.step:
      return THREE_STEP + getNumberText(step, null, name);
    case STEPS.COMMENT.step:
      return (
        FOUR_STEP + FOUR_STEP_A + FOUR_STEP_B + getNumberText(step, null, name)
      );
    case STEPS.SHTRIH_CODE.step:
      return FIVE_STEP + getNumberText(step, null, name);
    case STEPS.CHECK.step:
      return SIX_STEP + getNumberText(step, null, name);
    default:
      return FOOTER;
  }
}

function getNumberText(step: number, startTime: string, name: string) {
  const textOffer = `‚Üí ${name}\n\n`;
  const finish_txt = `${textOffer}–î–æ —Ñ–∏–Ω–∏—à–∞ `;
  const minutes = startTime
    ? LIMIT_TIME_IN_MINUTES_FOR_BUY - getDifferenceInMinutes(startTime)
    : null;
  const waitTime = minutes ? `(–æ—Å—Ç–∞–ª–æ—Å—å ${minutes} –º–∏–Ω. –¥–ª—è –∑–∞–∫–∞–∑–∞)` : '';

  switch (step) {
    case STEPS.CHOOSE_OFFER.step:
      return finish_txt + `9Ô∏è‚É£ —à–∞–≥–æ–≤\n`;
    case STEPS.CHECK_ARTICUL.step:
      return finish_txt + `8Ô∏è‚É£ —à–∞–≥–æ–≤\n`;
    case STEPS.SEARCH.step:
      return finish_txt + `7Ô∏è‚É£ —à–∞–≥–æ–≤ ${waitTime}\n`;
    case STEPS.ORDER.step:
      return finish_txt + `6Ô∏è‚É£ —à–∞–≥–æ–≤ ${waitTime}\n`;
    case STEPS.RECEIVED.step:
      return finish_txt + `5Ô∏è‚É£ —à–∞–≥–æ–≤\n`;
    case STEPS.COMMENT_ON_CHECK.step:
      return finish_txt + `4Ô∏è‚É£ —à–∞–≥–∞\n`;
    case STEPS.COMMENT.step:
      return finish_txt + `3Ô∏è‚É£ —à–∞–≥–∞\n`;
    case STEPS.SHTRIH_CODE.step:
      return finish_txt + `2Ô∏è‚É£ —à–∞–≥–∞\n`;
    case STEPS.CHECK.step:
      return finish_txt + `1Ô∏è‚É£ —à–∞–≥\n`;
    case STEPS.INBOT.step:
      return '';
    default:
      return '';
  }
}

export function getOffer(data: IOffer) {
  const offer =
    `üî•${data.fields['Name']}üî•` +
    '\n' +
    data.fields['–û–ø–∏—Å–∞–Ω–∏–µ'] +
    '\n' +
    '‚ùå–¶–µ–Ω–∞ –Ω–∞ WB ~' +
    data.fields['–¶–µ–Ω–∞ WB'] +
    '\n' +
    `‚ùóÔ∏è –ö–µ—à–±—ç–∫ ~ ${data.fields['–ö–µ—à–±—ç–∫']}‚ùóÔ∏è \n` +
    `‚≠êÔ∏è –í–∞—à–∞ —Ü–µ–Ω–∞ ~ ${data.fields['–í–∞—à–∞ —Ü–µ–Ω–∞']} ü´∂ \n` +
    `‚úÖ –î–ª—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ ${TELEGRAM_BOT_NAME} !\n 
    –ë—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—èü•∞ü•∞ü•∞`;

  const medias = [];
  const countPhotos = data.fields['–§–æ—Ç–æ'].length;
  for (let i = 0; i < data.fields['–§–æ—Ç–æ'].length; i++) {
    medias.push({
      type: 'photo',
      media: data.fields['–§–æ—Ç–æ'][i].url,
      caption: countPhotos - 1 === i ? offer : '',
    });
  }
  return medias;
}

export const parseUrl = (url: string, articul: string): boolean => {
  if (!url) return false;

  try {
    const splitUrl = url.trim().split('?')[0];
    const articulOnCheck = splitUrl.replace(/\D/g, '');
    return articul == articulOnCheck;
  } catch (e) {
    return false;
  }
};

export const locationCheck = (
  locationOffer: string,
  locationUser: string,
): { status: boolean; text: string } => {
  if (!locationUser) return { status: false, text: '–õ–æ–∫–∞—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞' };

  return locationUser.toLowerCase().includes(locationOffer.toLowerCase())
    ? { status: true, text: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —à–∞–≥ 1Ô∏è‚É£' }
    : {
        status: false,
        text: `–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (${locationUser}) –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–∞—á–µ`,
      };
};

export const getSecretChatId = () => {
  return process.env.NODE_ENV === 'development'
    ? TELEGRAM_MESSAGE_CHAT_TEST
    : TELEGRAM_MESSAGE_CHAT_PROD;
};

export const getNotificationValue = (
  notifications: INotifications,
  statisticNotifications: INotificationStatistics,
  status: BotStatus,
  startTime: string,
) => {
  let nextStatusNotification: BotStatus;
  switch (status) {
    case '–í—ã–±–æ—Ä —Ä–∞–∑–¥–∞—á–∏':
    case '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π':
    case '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º':
    case '–í—ã–∑–æ–≤':
    case '–ü–æ–∏—Å–∫':
      const minutes =
        status === '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π'
          ? getDifferenceInMinutes(startTime)
          : LIMIT_TIME_IN_MINUTES_FOR_BUY;
      if (minutes > LIMIT_TIME_IN_MINUTES_FOR_BUY) {
        nextStatusNotification = '–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ';
      } else {
        nextStatusNotification = status === '–ü–æ–∏—Å–∫' ? '–ó–∞–∫–∞–∑' : '–ü–æ–∏—Å–∫';
      }
      break;
    case '–ó–∞–∫–∞–∑':
      nextStatusNotification = '–ü–æ–ª—É—á–µ–Ω';
      break;
    case '–ü–æ–ª—É—á–µ–Ω':
      nextStatusNotification = '–û—Ç–∑—ã–≤';
      break;
    case '–û—Ç–∑—ã–≤':
    case '–û—Ç–∑—ã–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ':
      nextStatusNotification = '–®—Ç—Ä–∏—Ö-–∫–æ–¥';
      break;
    case '–®—Ç—Ä–∏—Ö-–∫–æ–¥':
      nextStatusNotification = '–ß–µ–∫';
      break;
  }
  return filterNotificationValue(
    notifications,
    statisticNotifications,
    nextStatusNotification,
  );
};

const filterNotificationValue = (
  notifications: INotifications,
  statisticNotifications: INotificationStatistics,
  status: BotStatus,
) => {
  let notification = null;
  let statistic = null;
  try {
    notification = notifications.records.find(
      (x) => x.fields.–ù–∞–∑–≤–∞–Ω–∏–µ === status,
    );
    statistic =
      statisticNotifications.records.length === 0
        ? null
        : statisticNotifications.records.find(
            (x) =>
              x.fields.–®–∞–±–ª–æ–Ω &&
              x.fields.–®–∞–±–ª–æ–Ω.length &&
              x.fields.–®–∞–±–ª–æ–Ω[0] === notification.fields.Id,
          );
  } catch (e) {
    console.log('filterNotificationValue', e, status, statisticNotifications);
  } finally {
    return { notification, statistic, status };
  }
};

export const scheduleNotification = (
  status: BotStatus,
  stopTime: string,
  startTime: string,
  countSendNotification: number,
  dateDelivery: string,
) => {
  const days = getDifferenceInDays(dateDelivery || stopTime);

  switch (status) {
    case '–í—ã–±–æ—Ä —Ä–∞–∑–¥–∞—á–∏':
    case '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π':
    case '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º':
    case '–í—ã–∑–æ–≤':
    case '–ü–æ–∏—Å–∫':
      const minutes = getDifferenceInMinutes(startTime);
      return (
        minutes <=
          (status === '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π'
            ? LIMIT_TIME_IN_MINUTES_FOR_BUY
            : LIMIT_TIME_IN_MINUTES_FOR_ORDER) && minutes > 10
      );
    case '–ó–∞–∫–∞–∑':
      if (countSendNotification === 0) {
        return dateDelivery ? days === 1 : days > 6;
      } else {
        return days > 2 && days < 4;
      }
    case '–ü–æ–ª—É—á–µ–Ω':
    case '–û—Ç–∑—ã–≤':
    case '–û—Ç–∑—ã–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ':
    case '–®—Ç—Ä–∏—Ö-–∫–æ–¥':
    case '–ß–µ–∫':
      return days === 1;
    default:
      return false;
  }
};

export const getTextForArticleError = (
  positionOnWB: string,
  countTryError: number,
  status: BrokeBotStatus,
) => {
  const helpText =
    positionOnWB && countTryError <= COUNT_TRY_ERROR
      ? `\n–≠—Ç–∞ –ø–æ–∑–∏—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ ${positionOnWB} —Å—Ç—Ä–∞–Ω–∏—Ü–µ.`
      : '';
  if (countTryError <= COUNT_TRY_ERROR)
    return (
      '–ê—Ä—Ç–∏–∫—É–ª—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã –Ω–∞—à–ª–∏ —Ç–æ–≤–∞—Ä' +
      helpText
    );

  switch (status) {
    case 'operator':
      return '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞üë©‚Äçüíª';
    case 'wait':
    case 'check_articul':
      return '–ê—Ä—Ç–∏–∫—É–ª—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" ‚§µÔ∏è';
    default:
      return status;
  }
};

export const getArticulErrorStatus = (
  errorStatus: BrokeBotStatus,
): BrokeBotStatus => {
  switch (errorStatus) {
    case 'operator':
      return 'wait';
    default:
      return 'wait';
  }
};
